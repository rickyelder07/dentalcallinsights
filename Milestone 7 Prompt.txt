You are an expert full-stack engineer and will act as my Cursor copilot. Project: "DentalCallInsights" â€” a Next.js + Supabase web app for turning call MP3s + call metadata into searchable transcripts, summaries, sentiment, and actionable insights. I need you to implement Milestone 7: Library & Analytics with advanced call management, comprehensive filtering, and data-driven insights.

ðŸŽ¯ Project Context
Current Status: âœ… Milestones 1-6 Complete (Authentication, User Management, Audio Upload & Storage, Transcription Pipeline, AI Insights with GPT-4o-mini, Embeddings and Search)
Target: ðŸš§ Milestone 7 - Library & Analytics
Branch: milestone/07-library-analytics
Problem: Dental office managers now have hundreds of transcribed calls with AI insights and semantic search, but need advanced call management, comprehensive filtering, bulk operations, and data analytics to make informed decisions about their practice operations.
Core User Action: Manage call library â†’ Filter by multiple criteria â†’ Perform bulk actions â†’ Analyze trends â†’ Make data-driven decisions.
Aha Moment: Managers can see patterns in patient satisfaction, identify training needs, track call volume trends, and optimize their practice operations through comprehensive analytics.

ðŸ“‹ Requirements & Constraints
Tech Stack: Next.js 14 (App Router), TypeScript, TailwindCSS, Supabase (Auth, Postgres, Storage, pgvector), OpenAI GPT-4o-mini, Vercel
Code Style: TypeScript strict mode, ESLint, Prettier, functional React components with hooks
Security: RLS policies for user data isolation, API key protection (server-side only), input validation
Performance: Efficient pagination, fast filtering, real-time analytics, optimized bulk operations
Cost Management: Efficient data aggregation, cached analytics, minimal API calls for insights
Integration: Build on existing search and insights system, leverage existing call data and embeddings

ðŸŽ¯ Core Features (4 Only)

1. **Advanced Call Library**
   - Paginated call list with infinite scroll
   - Advanced filtering (date range, sentiment, outcome, duration, tags)
   - Multiple sorting options (date, duration, sentiment, relevance)
   - Bulk selection and operations (transcribe, generate insights, delete)
   - Call status indicators and progress tracking
   - Export functionality (CSV, PDF reports)

2. **Comprehensive Analytics Dashboard**
   - Total calls and trends over time
   - Average sentiment analysis and patient satisfaction trends
   - Common topics and keywords extraction
   - Call volume patterns and peak hours analysis
   - Staff performance metrics and training insights
   - Revenue impact analysis from call outcomes

3. **Smart Filtering & Search**
   - Multi-criteria filtering with AND/OR logic
   - Saved filter presets for common queries
   - Advanced search with semantic + keyword combination
   - Filter by AI insights (action items, red flags, sentiment)
   - Date range filtering with custom periods
   - Duration and call type filtering

4. **Bulk Operations & Management**
   - Bulk transcription for multiple calls
   - Batch AI insights generation with cost estimation
   - Bulk embedding generation for semantic search
   - Mass export of selected calls
   - Bulk status updates and tagging
   - Archive and delete operations

ðŸŽ¯ Deliverables (create real files; show file path + file content)

1. Enhanced Library System
app/library/page.tsx - Advanced call library with pagination and filtering
app/components/CallCard.tsx - Individual call display with status and actions
app/components/CallList.tsx - Paginated call list with infinite scroll
app/components/BulkActions.tsx - Bulk operation controls and progress
app/components/ExportModal.tsx - Export functionality with format options

2. Analytics Dashboard
app/analytics/page.tsx - Comprehensive analytics dashboard
app/components/Analytics.tsx - Analytics widgets and charts
app/components/TrendsChart.tsx - Time-series data visualization
app/components/SentimentAnalysis.tsx - Sentiment trends and insights
app/components/TopicsAnalysis.tsx - Common topics and keywords
app/components/PerformanceMetrics.tsx - Staff and call performance metrics

3. Advanced Filtering System
app/components/Filters.tsx - Multi-criteria filtering interface
app/components/FilterPresets.tsx - Saved filter configurations
app/components/DateRangePicker.tsx - Advanced date filtering
app/components/SentimentFilter.tsx - Sentiment-based filtering
app/components/OutcomeFilter.tsx - Call outcome filtering
app/components/DurationFilter.tsx - Call duration filtering

4. Analytics API Endpoints
app/api/analytics/overview/route.ts - Dashboard overview data
app/api/analytics/trends/route.ts - Time-series trend analysis
app/api/analytics/sentiment/route.ts - Sentiment analysis data
app/api/analytics/topics/route.ts - Topic extraction and analysis
app/api/analytics/performance/route.ts - Performance metrics
app/api/analytics/export/route.ts - Data export functionality

5. Database Schema Updates
migrations/009_analytics_schema.sql - Analytics tables and views
migrations/010_filter_presets_schema.sql - User filter preferences
migrations/011_export_history_schema.sql - Export tracking and history
Store: analytics cache, filter presets, export history, user preferences
Indexes: Analytics queries, filtering performance, trend analysis

6. Enhanced TypeScript Types
types/analytics.ts - Analytics data types and interfaces
types/filters.ts - Filter configuration and preset types
types/export.ts - Export format and data types
Comprehensive type definitions for analytics and filtering

ðŸ”§ Technical Specifications

Analytics Data Processing
Model: GPT-4o-mini for topic extraction and analysis
Batch processing: Daily analytics aggregation
Caching: Redis-like caching for expensive calculations
Real-time: Live updates for recent data
Cost optimization: Efficient data aggregation and caching

Filtering Performance
Database indexes: Optimized for common filter combinations
Query optimization: Efficient multi-table joins
Pagination: Cursor-based pagination for large datasets
Caching: Filter result caching for repeated queries
Performance: Sub-second filtering across 10,000+ calls

Bulk Operations
Background processing: Non-blocking bulk operations
Progress tracking: Real-time progress updates
Error handling: Graceful failure handling and retry logic
Cost estimation: Pre-operation cost calculations
Rate limiting: API rate limit management

Export Functionality
Formats: CSV, PDF, Excel, JSON
Data selection: Custom field selection for exports
Scheduling: Scheduled report generation
Storage: Temporary file management and cleanup
Security: User-specific export access controls

ðŸŽ¯ Implementation Phases

Phase 1: Enhanced Library (Week 1)
- Implement paginated call list with infinite scroll
- Add advanced filtering interface
- Build bulk selection and operations
- Create call status indicators
- Test with large datasets (1,000+ calls)

Phase 2: Analytics Foundation (Week 2)
- Build analytics data aggregation system
- Implement dashboard overview widgets
- Create trend analysis and time-series data
- Add sentiment analysis visualization
- Performance optimization for large datasets

Phase 3: Advanced Analytics (Week 3)
- Implement topic extraction and analysis
- Build performance metrics and insights
- Add staff performance tracking
- Create revenue impact analysis
- Advanced data visualization components

Phase 4: Filtering & Export (Week 4)
- Build comprehensive filtering system
- Implement filter presets and saved queries
- Add export functionality with multiple formats
- Create bulk operations interface
- User experience optimization

Phase 5: Production & Documentation (Week 5)
- Production deployment and monitoring
- Comprehensive documentation and guides
- User training materials and tutorials
- Performance benchmarking and optimization
- Final testing and bug fixes

ðŸŽ¯ File Structure
app/
â”œâ”€â”€ analytics/
â”‚ â””â”€â”€ page.tsx # Analytics dashboard
â”œâ”€â”€ components/
â”‚ â”œâ”€â”€ CallCard.tsx # Individual call display
â”‚ â”œâ”€â”€ CallList.tsx # Paginated call list
â”‚ â”œâ”€â”€ BulkActions.tsx # Bulk operations
â”‚ â”œâ”€â”€ ExportModal.tsx # Export functionality
â”‚ â”œâ”€â”€ Analytics.tsx # Analytics widgets
â”‚ â”œâ”€â”€ TrendsChart.tsx # Time-series charts
â”‚ â”œâ”€â”€ SentimentAnalysis.tsx # Sentiment visualization
â”‚ â”œâ”€â”€ TopicsAnalysis.tsx # Topics and keywords
â”‚ â”œâ”€â”€ PerformanceMetrics.tsx # Performance insights
â”‚ â”œâ”€â”€ Filters.tsx # Multi-criteria filtering
â”‚ â”œâ”€â”€ FilterPresets.tsx # Saved filter configurations
â”‚ â”œâ”€â”€ DateRangePicker.tsx # Date filtering
â”‚ â”œâ”€â”€ SentimentFilter.tsx # Sentiment filtering
â”‚ â”œâ”€â”€ OutcomeFilter.tsx # Outcome filtering
â”‚ â””â”€â”€ DurationFilter.tsx # Duration filtering
â””â”€â”€ api/
â””â”€â”€ analytics/
â”œâ”€â”€ overview/route.ts # Dashboard overview
â”œâ”€â”€ trends/route.ts # Trend analysis
â”œâ”€â”€ sentiment/route.ts # Sentiment data
â”œâ”€â”€ topics/route.ts # Topic analysis
â”œâ”€â”€ performance/route.ts # Performance metrics
â””â”€â”€ export/route.ts # Export functionality
lib/
â”œâ”€â”€ analytics.ts # Analytics data processing
â”œâ”€â”€ filters.ts # Filter logic and presets
â”œâ”€â”€ export.ts # Export functionality
â””â”€â”€ pagination.ts # Pagination utilities
types/
â”œâ”€â”€ analytics.ts # Analytics data types
â”œâ”€â”€ filters.ts # Filter configuration types
â””â”€â”€ export.ts # Export format types
migrations/
â”œâ”€â”€ 009_analytics_schema.sql # Analytics tables and views
â”œâ”€â”€ 010_filter_presets_schema.sql # Filter preferences
â””â”€â”€ 011_export_history_schema.sql # Export tracking


ðŸŽ¯ Security Considerations

Data Privacy
- RLS policies for user-specific analytics
- No cross-user data access in analytics
- Secure export with user-specific access
- Analytics data aggregation with privacy controls

Performance Security
- Analytics query rate limiting per user
- Bulk operation security and validation
- Export file access controls and cleanup
- Secure caching with user-specific keys

API Security
- Analytics endpoint authentication
- Export functionality access controls
- Bulk operation validation and limits
- Input sanitization for all analytics queries

ðŸŽ¯ Cost Analysis

Analytics Processing Costs
Model: GPT-4o-mini for topic analysis
Cost: $0.00015 per 1K tokens (input) + $0.0006 per 1K tokens (output)
Topic analysis: ~$0.01 per 100 calls
Monthly analytics: ~$0.50 for 5,000 calls
Export generation: Minimal (data processing only)

Storage Costs
Analytics cache: ~$0.01 per 1,000 records
Export files: Temporary storage, minimal cost
Filter presets: Negligible storage cost
Total storage: < $0.10 per month

Monthly Cost Estimates
Small office (1,000 calls): ~$0.15
Medium office (5,000 calls): ~$0.75
Large office (20,000 calls): ~$3.00
Cost per analytics query: < $0.001

ðŸŽ¯ Success Metrics

Technical Performance
- Analytics load time: < 2 seconds
- Filter response time: < 500ms
- Bulk operation completion: < 30 seconds for 100 calls
- Export generation: < 10 seconds for 1,000 calls

User Experience
- Library navigation: < 1 second page loads
- Filter usability: > 90% user satisfaction
- Analytics adoption: > 70% of users use analytics weekly
- Export success rate: > 95% successful exports

Business Impact
- Decision making: 5x faster insights from data
- User productivity: 4x more efficient call management
- Data utilization: 95% of calls analyzed and categorized
- Cost efficiency: < $0.01 per analytics operation

ðŸŽ¯ Testing Strategy

Unit Testing
- Analytics calculation functions
- Filter logic and combinations
- Export format generation
- Bulk operation processing

Integration Testing
- End-to-end analytics workflows
- Filter and search combinations
- Bulk operations under load
- Export functionality across formats

User Acceptance Testing
- Analytics accuracy with real data
- Filter interface usability
- Export functionality reliability
- Mobile analytics experience

ðŸŽ¯ Documentation Requirements

Technical Documentation
- Analytics API documentation
- Database schema documentation
- Filter configuration guides
- Export format specifications

User Documentation
- Analytics dashboard tutorial
- Advanced filtering techniques
- Export usage guides
- Bulk operations best practices

ðŸŽ¯ Next Steps After Completion

Immediate (Week 6)
- User training and onboarding
- Analytics performance monitoring
- User feedback collection and analysis
- Bug fixes and minor improvements

Short-term (Months 2-3)
- Advanced analytics features (predictive insights)
- Custom dashboard configurations
- Integration with external analytics tools
- Mobile analytics optimization

Long-term (Months 4-6)
- Machine learning for predictive analytics
- Advanced data visualization
- Integration with practice management systems
- Multi-location analytics support

ðŸŽ¯ GPT-4o-mini Details

Model Selection
Primary: GPT-4o-mini for topic extraction and analysis
Fallback: text-embedding-3-small for semantic analytics
Reason: Cost-effective, high-quality analysis
Performance: Fast processing, accurate insights

Analytics Processing
Topic extraction: Identify common themes and patterns
Sentiment analysis: Deep dive into emotional trends
Performance insights: Staff and call quality analysis
Trend identification: Pattern recognition across time periods

Token Usage Optimization
Batch processing: Analyze multiple calls together
Query optimization: Efficient analytics data aggregation
Caching strategy: Store and reuse analysis results
Cost monitoring: Track and limit analytics processing

ðŸŽ¯ Final Notes

This milestone focuses on transforming the call library into a comprehensive management and analytics platform. The goal is to provide dental office managers with powerful tools to understand their practice operations, identify trends, and make data-driven decisions.

The implementation should be performant, user-friendly, and cost-effective, building on the solid foundation of Milestones 1-6 while adding advanced management and analytics capabilities that make the accumulated call data truly actionable for business operations.

Focus on usability, performance, and insights. The analytics should reveal patterns and opportunities that weren't visible before, helping managers optimize their practice operations and improve patient satisfaction.

Remember: This is about making data actionable and insights accessible. Every analytics feature should lead to better decision-making and improved practice operations.

Be explicit in your response: Show file tree and contents, include commands the developer must run locally, provide a brief checklist for verifying the analytics system works.

Finish by creating a git commit message suggestion and recommended branch name milestone/07-library-analytics.

Keep the response machine-readable: for every file include a header with the file path (```path/to/file```) followed by content.
```
