You are an expert full-stack engineer and will act as my Cursor copilot. Project: "DentalCallInsights" ‚Äî a Next.js + Supabase web app for turning call MP3s + call metadata into searchable transcripts, summaries, sentiment, embeddings, and basic analytics. I need you to implement Milestone 3: Audio Upload & Storage with comprehensive CSV call data matching capabilities.
üéØ Project Context
Current Status: ‚úÖ Milestones 1-2 Complete (Authentication & User Management)
Target: üöß Milestone 3 - Audio Upload & Storage with CSV Integration
Branch: milestone/03-audio-upload-and-storage
Problem: Dental office managers need to upload call recordings (MP3s) and existing call data (CSVs) to create a comprehensive call analysis system. The system must handle file uploads, storage, and intelligent matching between audio recordings and CSV call metadata.
Core User Action: Upload MP3 files + CSV call data ‚Üí Automatic matching ‚Üí Store with metadata ‚Üí Ready for transcription pipeline.
üìã Requirements & Constraints
Tech Stack: Next.js 14 (App Router), TypeScript, TailwindCSS, Supabase (Auth, Postgres, Storage, pgvector), Vercel
Code Style: TypeScript strict mode, ESLint, Prettier, functional React components with hooks
Security: RLS policies for user data isolation, file size limits, input validation
Performance: Handle large files efficiently, progress indicators, error recovery
Integration: Build on existing auth system, prepare for transcription pipeline
üéØ Deliverables (create real files; show file path + file content)
1. Supabase Storage Setup
Storage bucket: call-recordings with RLS policies
File organization: {user_id}/{filename} structure
File limits: 100MB max per file, MP3/WAV/M4A/AAC support
Security: User isolation, authenticated uploads only
2. Core Upload Components
app/components/AudioUploader.tsx - Drag-and-drop MP3 upload with progress
app/components/CsvUploader.tsx - CSV file upload with validation
app/components/CallMatcher.tsx - Interface for matching recordings to CSV data
app/components/UploadProgress.tsx - Real-time upload progress indicators
app/components/MetadataForm.tsx - Call information form (patient ID, call type, etc.)
3. API Endpoints
app/api/upload/route.ts - Audio file upload handler
app/api/csv-upload/route.ts - CSV data upload and parsing
app/api/match-calls/route.ts - Call matching and linking API
app/api/upload/progress/route.ts - Upload progress tracking
4. Utility Libraries
lib/storage.ts - Supabase Storage helpers and file management
lib/upload.ts - Upload utilities and validation
lib/csv-parser.ts - CSV parsing and validation (enhance existing)
lib/call-matcher.ts - Call matching algorithms (enhance existing)
lib/file-validation.ts - File type and size validation
5. TypeScript Types
types/upload.ts - Upload-related types and interfaces
types/csv.ts - CSV data types (enhance existing)
types/storage.ts - Storage and file management types
6. Database Migrations
migrations/003_storage_setup.sql - Storage bucket and RLS policies
migrations/004_csv_call_data.sql - CSV call data table (enhance existing)
Update existing calls table with storage path and CSV linking
7. Enhanced Upload Page
app/upload/page.tsx - Complete upload interface with both MP3 and CSV support
Integrated drag-and-drop zones
Real-time progress tracking
Call matching interface
Error handling and validation
8. Storage Configuration
Supabase Storage bucket setup with proper RLS policies
File size and type restrictions
User data isolation
Upload progress tracking
üîß Technical Specifications
File Upload Requirements
Supported formats: MP3, WAV, M4A, AAC
Maximum file size: 100MB per file
Storage location: call-recordings/{user_id}/{filename}
Metadata fields: Patient ID, call type, date/time, duration, tags
Progress tracking: Real-time upload progress with retry logic
CSV Data Integration
Supported format: Standard CSV with headers (CALL TIME, CALL DIRECTION, etc.)
Date parsing: Multiple formats including "September 23rd 2025 4:49 pm"
Validation: Row-level validation with detailed error reporting
Matching: Time-based, phone number, and duration matching algorithms
Security Requirements
RLS policies: Users can only access their own files
File validation: Server-side validation of file type and size
Input sanitization: All CSV data validated and sanitized
Access control: Authenticated users only
Performance Requirements
Upload progress: Real-time progress indicators
Chunked uploads: For large files (>10MB)
Error recovery: Automatic retry with exponential backoff
Concurrent uploads: Support multiple simultaneous uploads
üóÑÔ∏è Database Schema Updates

Enhanced calls Table
ALTER TABLE calls ADD COLUMN IF NOT EXISTS storage_path TEXT;
ALTER TABLE calls ADD COLUMN IF NOT EXISTS file_size BIGINT;
ALTER TABLE calls ADD COLUMN IF NOT EXISTS file_type TEXT;
ALTER TABLE calls ADD COLUMN IF NOT EXISTS upload_status TEXT DEFAULT 'uploading';

CSV Call Data Table (enhance existing)
-- Already exists in migration 004_csv_call_data.sql
-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_csv_call_data_call_time ON csv_call_data(call_time);
CREATE INDEX IF NOT EXISTS idx_csv_call_data_source_number ON csv_call_data(source_number);

Storage RLS Policies
-- Users can only access their own files
CREATE POLICY "Users can view own files" ON storage.objects
FOR SELECT USING (auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can upload own files" ON storage.objects
FOR INSERT WITH CHECK (auth.uid()::text = (storage.foldername(name))[1]);


üé® UI/UX Requirements
Upload Interface
Drag-and-drop zones for both MP3 and CSV files
Progress indicators with percentage and speed
File validation with clear error messages
Metadata forms for call information
Call matching interface showing potential matches
Error handling with retry options
User Experience
Intuitive workflow: Upload ‚Üí Match ‚Üí Confirm ‚Üí Store
Visual feedback: Progress bars, success/error states
Responsive design: Works on desktop and mobile
Accessibility: Keyboard navigation, screen reader support
üîç Call Matching Features
Automatic Matching
Time proximity: Match within 5 minutes (configurable)
Phone number matching: Exact or partial match
Duration similarity: Within 30 seconds tolerance
Combined scoring: Weighted algorithm for match confidence
Manual Review
Match suggestions: Show potential matches for review
Confidence scoring: High (‚â•0.9), Medium (0.7-0.9), Low (0.5-0.7)
Quality validation: Check match quality and suggest improvements
Conflict resolution: Handle multiple potential matches
üìä Success Metrics
Functional Requirements
‚úÖ Users can upload MP3 files via drag-and-drop
‚úÖ Users can upload CSV files with validation
‚úÖ Automatic call matching with 90%+ accuracy
‚úÖ Real-time upload progress indicators
‚úÖ File validation prevents invalid uploads
‚úÖ User data is properly isolated
Performance Requirements
‚úÖ Files up to 100MB upload successfully
‚úÖ Upload progress updates within 1 second
‚úÖ Error recovery works for network failures
‚úÖ Multiple concurrent uploads supported
‚úÖ CSV processing < 1 second per 100 rows
Security Requirements
‚úÖ RLS policies prevent cross-user data access
‚úÖ File type validation prevents malicious uploads
‚úÖ Upload endpoints are properly authenticated
‚úÖ File size limits are enforced
üöÄ Implementation Phases
Phase 1: Storage Infrastructure
Configure Supabase Storage bucket
Set up RLS policies for user isolation
Configure file size limits and allowed types
Test storage access permissions
Phase 2: Upload Interface
Create AudioUploader component with drag-and-drop
Implement upload progress indicators
Add file validation (type, size, format)
Create metadata form for call information
Phase 3: CSV Integration
Enhance CSV uploader component
Implement call matching interface
Add CSV data validation and parsing
Create call correlation system
Phase 4: Backend Integration
Create API routes for file uploads
Implement server-side file validation
Add database records for uploaded files
Handle upload completion and cleanup
Phase 5: Testing & Polish
Test with multiple file types and sizes
Verify user data isolation
Test error scenarios and recovery
Optimize upload performance
üìÅ File Structure
app/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ AudioUploader.tsx          # MP3 upload with drag-and-drop
‚îÇ   ‚îú‚îÄ‚îÄ CsvUploader.tsx            # CSV upload component
‚îÇ   ‚îú‚îÄ‚îÄ CallMatcher.tsx            # Call matching interface
‚îÇ   ‚îú‚îÄ‚îÄ UploadProgress.tsx         # Progress indicator
‚îÇ   ‚îî‚îÄ‚îÄ MetadataForm.tsx           # Call information form
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ upload/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ route.ts               # Audio upload endpoint
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ progress/route.ts      # Progress tracking
‚îÇ   ‚îú‚îÄ‚îÄ csv-upload/route.ts        # CSV upload endpoint
‚îÇ   ‚îî‚îÄ‚îÄ match-calls/route.ts       # Call matching API
‚îî‚îÄ‚îÄ upload/page.tsx                # Enhanced upload page

lib/
‚îú‚îÄ‚îÄ storage.ts                     # Supabase Storage helpers
‚îú‚îÄ‚îÄ upload.ts                      # Upload utilities
‚îú‚îÄ‚îÄ csv-parser.ts                 # CSV parsing (enhance existing)
‚îú‚îÄ‚îÄ call-matcher.ts               # Call matching (enhance existing)
‚îî‚îÄ‚îÄ file-validation.ts            # File validation utilities

types/
‚îú‚îÄ‚îÄ upload.ts                      # Upload-related types
‚îú‚îÄ‚îÄ csv.ts                         # CSV data types (enhance existing)
‚îî‚îÄ‚îÄ storage.ts                     # Storage types

migrations/
‚îú‚îÄ‚îÄ 003_storage_setup.sql          # Storage bucket and RLS policies
‚îî‚îÄ‚îÄ 004_csv_call_data.sql          # CSV call data (enhance existing)

üîí Security Considerations
Data Protection
User Isolation: RLS policies ensure users only see their own data
File Validation: Server-side validation of file type and size
Input Sanitization: All CSV data validated and sanitized
Access Control: Authenticated users only
File Upload Security
File Type Validation: Only allow audio formats
Size Limits: Maximum 100MB per file
Virus Scanning: Consider adding virus scanning for uploaded files
Rate Limiting: Prevent abuse with upload rate limits
üß™ Testing Strategy
Unit Tests
File validation functions
Upload progress calculations
CSV parsing and validation
Call matching algorithms
Integration Tests
End-to-end upload flow
RLS policy enforcement
Error handling scenarios
Concurrent upload handling
User Acceptance Tests
Upload various file types and sizes
Test with slow/unstable connections
Verify user data isolation
Test CSV matching accuracy
üìö Documentation Updates
Update existing documentation:
README.md - Add upload features and setup instructions
CODEFLOW.md - Update milestone 3 with upload capabilities
PROJECT_STRUCTURE.md - Add new files and components
Create UPLOAD_SETUP.md - Upload system setup guide
üéØ Success Criteria
Done looks like:
‚úÖ User can drag-and-drop MP3 files and see upload progress
‚úÖ User can upload CSV files with automatic validation
‚úÖ System automatically matches recordings to CSV data
‚úÖ Files are stored securely with user isolation
‚úÖ Upload page shows comprehensive interface for both file types
‚úÖ Error handling works for all failure scenarios
‚úÖ System is ready for transcription pipeline (Milestone 4)
üöÄ Next Steps After Completion
Immediate (Milestone 4)
OpenAI Whisper integration for transcription
Background job processing for uploaded files
Transcript display and editing interface
Future Enhancements
Batch upload functionality
Advanced matching algorithms
Real-time processing
Analytics dashboard integration
Be explicit in your response: Show file tree and contents, include commands the developer must run locally, and provide a brief checklist for verifying the upload system works (e.g., uploading a test MP3 file and CSV data, verifying storage, testing matching).
Finish by creating a git commit message suggestion and recommended branch name milestone/03-audio-upload-and-storage.
Keep the response machine-readable: for every file include a header with the file path (```path/to/file```) followed by content.